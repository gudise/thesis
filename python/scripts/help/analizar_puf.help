 
 Programa de simulación y análisis de PUF de medida compensada: este programa genera (o lee) una matriz de
 celdas PUF y utiliza un esquema de comparaciones (topología de la PUF) para producir una respuesta binaria.
 El proceso de fabricación se simula mediante una distribución de probabilidad normal. El programa admite un
 gradiente de correlación espacial. Alternativamente a la generación Monte Carlo de medidas puede
 introducirse un archivo externo  con la opción '-in' adecuada (ver ayuda más abajo).
 
 Uso:
 ----
 
 analizar_puf.x [*] [-help] [-in] [-out] [-resize_pufexp(resx)] [-truncate_pufexp(trux)] [-geom] [-sim]
 [-nretos] [-ninst] [-nrep] [-npdl] [-nprec] [-puf] [-pufanalisis(pa)] [-adversario(adv)] [-entropia]
 [-minentropia] [-nv] [-gsort]

 Opciones:
 ---------

 * 53
 
	Flag especial para indicar el numero de bits de precisión utilizados por la biblioteca 'mpfr'. Por
	defecto se utilizan 53 bits


 -help
 
	Pinta esta ayuda


 -in raw(r) | dist(d) | pufexp(x)
 
	Esta opción permite leer datos de un fichero de entrada:

	raw(r) ["rawdata.mtz"]
		Lee un fichero en formato '.mtz' con nx*ny columnas, ninst*nrep*npdl filas desdobladas
		ninst(nrep(npdl)). En caso de faltar todas (o algunas) de estas opciones, el programa procede de la
		siguiente manera:
		
			Por defecto ninst=npdl=1, nrep=N_filas de la entrada.
			Si nrep>1 pero N_filas==ninst*npdl, se supone que el usuario quiere realizar una simulación (e.g.
			de temperatura) introduciendo una única repetición, y se expande nrep para coincidir con 
			N_filas=ninst*n_rep*npdl.
			En otro caso el programa termina con un error.
			
		En cualquier caso los números introducidos deben permitir 'doblar' el numero de columnas leídas en un
		array de tres dimensiones, en caso contrario el programa terminará con un error. Al introducir los
		datos en crudo, podemos construir nosotros la respuesta PUF utilizando alguna de las topologías
		propuestas (el programa es sensible a la opción '-topol', ver más abajo), introduciendo el numero de 
		retos '-nretos' deseado. Ademas, si asignamos unas cantidades '-nx' y/o '-ny' el programa podra 
		construir el mapa de frecuencias utilizando la opción '-out hm' (ver mas abajo). Además, podemos 
		utilizar las PDL como retos construyendo 'pufexp' y doblándolo de la manera adecuada utilizando 
		'-resize_pufexp'.

	dist(d)["dist.mtz"]
		Esta subopción permite introducir una distribución de valores; el formato de entrada será una matriz
		'.mtz', pero se espera que tenga solo una columna y todos los valores se distribuyan en una sola 
		fila. Esta opción es útil únicamente para realizar algunos análisis estadísticos, como dibujar 
		histogramas o calcular entropías. No permite ningún tipo de simulación o postprocesamiento PUF.

	pufexp(x) ["pufexp.pex"]
		Esta subopción permite introducir un experimento PUF en formato '.pex'; en este caso el programa 
		ignora las opciones -nretos, -ninst, -nrep y -topol: únicamente podremos realizar el análisis de los 
		datos leídos.	Notar que si se indican ambas opciones, primero se realiza el desdoblamiento y solo 
		después el truncamiento. En ausencia de cualquier subopción se toma -in = -in r rawdata.mtz


 -out [raw(r)] [dist(d)] [pufexp(x)] [map(m)] [hist(h)]
 
	Esta opción controla los ficheros de salida.

	raw(r) ["rawdata_out.mtz"]
		Escribe un fichero en formato '.mtz' con nx*ny columnas, nretos*ninst*nrep filas (desdobladas
		nretos{ninst{nrep}}). Esta subopción se ignora si se utiliza la opcion '-in'.

	dist(d) ["dist_out.mtz"]
		Escribe la distribución de palabras binarias simuladas (si no hay opción '-in'), o introducidas (si 
		se utiliza la opción '-in r | -in x'). Esta subopción se ignora si se utiliza '-in d'.

	pufexp(x) ["pufexp_out.pex"] [resize] [truncate] [promedio] [zeropad]
		Escribe un experimento PUF en formato '.pex' para una simulación PUF o un fichero 'rawdata'. Esta 
		subopción se ignora si se utiliza '-in d | -in x'.
		Admite una serie de subopciones:
		
			resize 1,1,1,1
				Esta opción permite doblar o desdoblar las respuestas para conseguir un menor número de
				respuestas de mayor longitud, o más respuestas de menor longitud (respectivamente). Una vez
				indicada esta opción es obligatorio incluir cuatro números enteros separados por una coma que
				indican:	
					nuevo_nretos,nuevo_ninst,nuevo_nrep,nuevo_tamano_respuesta
					
				El producto de estas cuatro cantidades debe ser igual que en el fichero 'pufexp' original.
				
			truncate -1
				Esta opción permite truncar las 'bitwrds' de entrada, modificando el tamaño de las respuestas al
				número entero indicado a continuación. Si este número es negativo (por defecto), esta opción se
				ignora.
			
			promedio
				Si esta opción está presente se promedia 'pufexp' en el eje 'nrep'.
			
			zeropad 0
				Esta opción extiende las respuestas con el número indicado de ceros (por defecto, ninguno).
				
		Estas subopciones se resolverán en el mismo orden en el que se introducen (las que se introduzcan).

	map(m) ["map.txt"]
		Escribe el array de celdas para la primera instancia PUF para una simulación PUF o si se utiliza la 
		entrada '-in r'. Esta subopción se ignora si se utiliza '-in d | -in x'

	hist(h) ["histograma.txt"] [caja] [xmin] [xmax] [resolucion] [sspace] [norm]
		Escribe el histograma de la distribución (simulada o introducida).
		Admite una serie de subopciones:

		caja [f] 1.0
			Con esta opción se introduce el tamaño de la caja. Si la opción no está presente, el tamaño se 
			calcula automáticamente utilizando la regla de Friedmann-Diaconis. Si se escribe el caracter 'f' 
			delante de un número (real), entonces dicho número real se utilizará como factor multiplicativo 
			sobre el tamaño de caja calculado automáticamente mediante la regla de Friedmann-Diaconis. Notar 
			que en el método 'sspace' la caja se ignora.

		xmin -1.0
			Esta opción permite fijar el extremo inferior del histograma. Si se introduce un valor negativo 
			(por defecto) el extremo se calcula automáticamente a partir de los datos.

		xmax -1.0
			Esta opción permite fijar el extremo superior del histograma. Si se introduce un valor negativo 
			(por defecto) el extremo se calcula automáticamente a partir de los datos.

		resolucion 6
			Esta cantidad es el número de cifras decimales de la distribución de entrada. Para valores 
			'float' este valor es '6'. Si la distribución proviene de una conversión binaria->decimal, la 
			resolución deberá ser '0'. Esta opción solo es relevante para el método 'sspace'.

		sspace
			Si esta opción está presente se modifica el algoritmo utilizado para construir el histograma 
			(sampling space). 'sspace' ignora el tamaño de caja, y solo debe utilizarse sobre espacios 
			compactos.

		norm [area | alt]
			Esta opción controla la normalización del histograma (por área -por defecto- o por el valor
			maximo).


 -geom [nx] [ny]
 
	Geometría de la instancia PUF. Esta opción se ignora si se utiliza '-in d | -in x'.

	nx 1
		Tamaño de la matriz PUF en la direccion X.

	ny 1
		Tamaño de la matriz PUF en la direccion Y.


 -sim [frec] [desv] [fcorr] [ftemp]
 
	Esta opción controla algunos parámetros de la simulación, por lo tanto se ignora si se uitilizan las
	entradas '-in d | -in x'.

	frec [100.0]
		Frecuencia nominal promedio para la simulacion (en MHz). Se ignora si se utiliza la entrada '-in r'.

	desv [1.0]
		Desviación de la frecuencia nominal en cada array de celdas.

	fcorr [lineal_x | lineal_xy | producto_xy]
		Si esta opción está presente se aplicará un factor de correlación entre los valores de distintas
		celdas. Pueden utilizarse diversos tipos de correlacion:

		lineal_x [1.0]
			El valor medio de la distribución depende de la coordenada X multiplicada por 'factor.

		lineal_xy [1.0] [1.0]
			El valor medio de la distribución depende de la suma de las coordenadas X,Y ponderadas 
			respectivamente por 'factor_x' y 'factor_y'.

		producto_xy [1.0]
			El valor medio de la distribución se multiplica por las coordenadas X*Y y por 'factor'.

	ftemp [0.0]
		Este factor simula una constante de acoplo térmico para los elementos físicos que constituyen la PUF.
		A los valores nominales caracterísiticos de la PUF se suma un número aleatorio gaussiano cuya varianza es la
		diezmilésima parte del valor nominal multiplicado por 'ftemp'.


 -nretos 1
 
	Número de retos (permutaciones) utilizadas para cada instancia. Esta opción se ignora si se utilizan las 
	entradas '-in d | -in x'.


 -ninst 1
 
	Número de instancias simuladas. Esta opción se ignora si se utilizan las entradas '-in d | -in x'


 -nrep 1 [promedio]
 
	Número de repeticiones medidas para cada reto e instancia. Esta opción se ignora si se utilizan las 
	entradas '-in d | -in x'. Si se acompaña de la palabra 'promedio' (detrás del entero que indica el número
	de repeticiones) se utilizará el promedio (i.e., será como un sistema con una únia repetición).


 -npdl 1
 
	Número de valores proporcionados por cada oscilador (reconfigurabilidad del oscilador). Esta opción se 
	ignora si se utilizan las entradas '-in d | -in x'


 -nprec 1
 
	Precisión de la medida comparativa medido en número de bits. Si nprec = 1 solo se medirá el signo de la 
	comparación. Esta opción se ignora si se utilizan las entradas '-in d | -in x'.


 -puf [ringoscillator(ro) | arbiter(a)]
 
	Esta opción permite elegir qué clase de PUF simular. Se ignora si '-in d | x'. Además la forma en que se
	interpreta '-in r' puede cambiar.

	ringoscillator(ro) [1o2 | n-1 | ap | km | c1 | file | rp]
		Simula RO-PUF. Los retos se componen de la sucesión de parejas utilizadas en la comparación (sin 
		normalizar por el número de osciladores).
		La subopción que sigue permite cambiar la forma en que se comparan pares de osciladores:
		
		1o2
			Se comparan pares de osciladores sin repetición (e.g., 1 con 2, 3 con 4, etc), dando lugar a una
			respuesta de N/2 bits (siendo 'N' el número de osciladores).
		
		n-1
			Se comparan pares de osciladores contiguos con repetición (e.g., 1 con 2, 2 con 3, etc), dando 
			lugar a una respuesta de N-1 bits (siendo 'N' el número de osciladores).

		ap
			Se comparan todos los pares de osciladores, dando lugar a una respuesta de N·(N-1)/2 bits (siendo
			'N' el número de osciladores).

		km [3]
			Se divide el conjunto de N osciladores en grupos de 'k', y de cada uno de estos se extraen 
			k·(k-1)/2 bits. Esta opción debe ir acompañada del valor 'k' (por defecto k=3)

		c1
			Se comparan todos los osciladores con el primer oscilador, dando lugar a una respuesta de N-1 
			bits.

		file ["topol.cmt"]
			Esta opción carga una topología predefinada en el archivo 'topol.cmt'

		rp [1]
			Se toman aleatoriamente tantos pares de osciladores como se indique en la subopción, y se genera 
			el mismo número de bits.

	arbiter(a)
		Simula una Arbiter-PUF.


 -pufanalisis(pa) [intradist] [interdist] [far] [frr] [eer] [roc] [analisis_v(av)]
 
	Esta opción permite configurar el análisis llevado a cabo sobre los datos PUF simulados/introducidos.

	intradist [hist(h)] [dist(d)] [ajuste(a)]
		Calcula la intra-distancia (fiabilidad) de la respuesta PUF. Admite una serie de subopciones:

		hist(h) ["intrad_hist.txt"] [caja] [xmin] [xmax]
			Genera el histograma de las distancias Hamming. Ver '-in h' para una explicacion de la
			configuración.
		
			caja 1.0
				Ver la subopción 'caja' en '-in h'
			
			xmin -1.0
				Ver la subopción 'xmin' en '-in h'
			
			xmax -1.0
				Ver la subopción 'xmax' en '-in h'

		dist(d) ["intrad_dist.mtz"]
			Genera la distribución (módulo 10) de las respuestas.

		ajuste(a) ["intrad_ajuste.txt"]
			Genera un ajuste binomial al histograma de las distancias Hamming.

	interdist [hist(h)] [dist(d)] [ajuste(a)]
		Calcula la inter-distancia (unicidad) de la respuesta PUF. Admite una serie de subopciones:
		
		hist(h) ["interd_hist.txt"] [caja] [xmin] [xmax]
			Genera el histograma de las distancias Hamming. Ver '-in h' para una explicacion de la
			configuración.
		
			caja 1.0
				ver la subopción 'caja' en '-in h'
			
			xmin -1.0
				ver la subopción 'xmin' en '-in h'
			
			xmax -1.0
				ver la subopción 'xmax' en '-in h'
				
		dist(d) ["interd_dist.mtz"]
			Genera la distribución (módulo 10) de las respuestas.

		ajuste(a) ["interd_ajuste.txt"]
			Genera un ajuste binomial al histograma de las distancias Hamming.

	far ["far.txt"]
		Calcula la tasa de falsa aceptación (False Acceptance Rate) del experimento.

	frr ["frr.txt"]
		Calcula la tasa de falso rechazo (False Reject Rate) del experimento.

	eer
		Calcula el Equal Error Rate (EER) del experimento.

	roc ["roc.txt"]
		Calcula la curva Receiver-Operating Characteristic (ROC)
		
	analisis_v(av) ["goldenkey.mtz"] [hist(h)] [dist(d)] [ajuste(a)]
		Realiza un 'análisis V' utilizando un fichero 'goldenkey'. Este análisis consiste en calcular la
		distancia Hamming entre la respuesta binaria introducida/simulada y la palabra 'golden' guardada en 
		el fichero 'goldenkey', para cada reto e instancia, y promediada por el número de retos, instancias y
		repeticiones. El fichero 'goldenkey' consta de nretos*ninst filas desdobladas nretos(ninst), y tantas
		columnas como bits contengan las respuestas. Los retos/instancias no se identifican de ninguna manera
		particular, el usuario es responsable de que estos estén en el mismo orden que en el archivo '.pex'
		simulado/introducido. Admite una serie de subopciones:
		
			hist(h) ["intrad_hist.txt"] [caja] [xmin] [xmax]
				Genera el histograma de las distancias Hamming. Ver '-in h' para una explicacion de la
				configuración.
		
				caja 1.0
					Ver la subopción 'caja' en '-in h'
			
				xmin -1.0
					Ver la subopción 'xmin' en '-in h'
			
				xmax -1.0
					Ver la subopción 'xmax' en '-in h'

			dist(d) ["intrad_dist.mtz"]
				Genera la distribución (módulo 10) de las respuestas.

			ajuste(a) ["intrad_ajuste.txt"]
				Genera un ajuste binomial al histograma de las distancias Hamming.


 -adversario(adv) [ignorant(i) | global_bias(gb) | local_bias(lb) | machine_learning(ml)] [ntrials]
				  [umbral_id]
 
	Esta opción permite configurar varios niveles de un adversario que trata de romper la PUF. 'Romper la 
	PUF' es crear un modelo matemático eficaz de la PUF. Un 'modelo eficaz' de la PUF es aquel capaz de 
	generar respuestas a retos con un margen de error respecto de la respuesta legítima x<y, donde 'y' es el 
	umbral de identificacion de un sistema de identificación PUF. Esta opción se ignora si se utiliza la 
	entrada '-in d'

	ignorant(i)
		El adversario ignora por completo la distribución subyacente de las respuestas, y lo mejor que puede 
		hacer es advinar bits al azar.

	global_bias(gb) [1]
		El adversario conoce el sesgo global de las respuestas hacia 0_n -> 1_n, donde 'X_n' es la palabra de
		'n' dígitos 'X', y 'n' es el valor de la subopción (1 por defecto). El adversario genera un conjunto 
		de respuestas binarias que reproduzcan este sego.

	local_bias(lb) [1]
		El adversario conoce el sesgo en relación a su posición en la palabra binaria de las respuestas hacia
		0_n -> 1_n (1 por defecto). El adversario genera un conjunto de respuestas binarias que reproduzcan 
		este sego.

	machine_learning(ml)
		Esta opción genera un archivo '.py' con el código necesario para implementar una red neuronal en 
		tf-keras. Esta red se entrena con una sucesión de i-1 bits, y trata de adivinar el i-ésimo bit.

	ntrials 1
		Esta opción permite cambiar el número de intentos de acceso ilegítimo del adversario. Una vez 
		determinado el modelo de adversario, este generará 'ntrials' repeticiones para cada instancia y cada 
		reto. Se calcula la HD promedio entre cada repetición y el conjunto de repeticiones proporcionadas a 
		la entrada para cada instancia y reto. Si HD promedio es menor que el umbral de identificación el 
		acceso es positivo, en caso contrario negativo.

	umbral_id -1.0
		Esta opción permite modificar el umbral de identificación. Si se introduce un valor negativo (por 
		defecto) el umbral se calcula automáticamente para EER (equal error rate). Introducir un valor en 
		tanto por ciento (entre 0.0 y 100.0).


 -entropia [pb] [pn]
 
	Si esta opción está presente el programa devolverá la entropía de la distribución. Por defecto se calcula
	la entropía de Shannon.

	pb
		Calcula la entropía por bit de la respuesta.

	pn
		Calcula la entropía por celda de la respuesta.


 -minentropia
 
	Si esta opción está presente el programa devolverá la minentropía de la distribución.


 -nv
 
	Si esta opción está presente el programa no pinta barras de progreso. Esta opción se utiliza para lanzar 
	el programa dentro de un script


 -gsort
 
	Si esta opción está presente se utilizarán las funciones de la biblioteca GSL para ordenar arreglos. En 
	caso contrario se utilizara el algoritmo 'quickSort'. El método GSL es mucho más rápido pero consume más 
	memoria

