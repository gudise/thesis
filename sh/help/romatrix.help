
 Este script copia en el directorio actual los tres ficheros necesarios para implementar una matriz de
 osciladores de anillo con medicion de la frecuencia y comunicación:
	
	pc (.py) <-> microprocesador (.c) <-> FSM en FPGA (.v),
 
 Además de un script .tcl generado por Vivado para reconstruir el blockDesign que contiene los modulos GPIO
 necesarios para la comunicacion. Al incluir el nombre de la placa, el script copia los ficheros correctos
 para implementar el diseno (en ausencia de nombre se considera por defecto 'zybo'. Notar que este script
 copia un esquema de FSM2, debe incluirse en el diseño una matriz (usar gen_romatrix.puf.x), y editarse la
 maquina FSM2 para acomodar los retos/bits de selección.
 
 Uso:
 ----
 
 romatrix.sh [-help] [-projname] [-board] [-njobs] [-qspi] [-detailr] [-tipo] [-pinmap] [-minsel] [-Ninv]
	[-posmap] [-resolucion] [-dw] [-biw] [-bow] [-port] [-linux] 
			 
 Opciones:
 ---------
 
 -help
		
	Pinta esta ayuda
		
		
 -projname "project_romatrix"
		
		
 -board pynqz2 | zybo | cmoda7_15t | cmoda7_35t
		
		
 -njobs 4
		
		
 -qspi
		
		
 -detailr
 
	si esta opcion esta presente el flujo .tcl incluira el cableado de los inversores despues de la sintesis.
	Esto aumenta las probabilidades de que la herramienta haga un cableado idéntico, pero es recomendable
	comprobarlo. (NOTA: no tengo garantías de que esta opción sea del todo compatible con -qspi).
		
		
 -tipo lut1 | lut2 | lut3 | lut3mr | lut4 | lut5 | lut6 | lut6mr | lut6_2
		
		
 -pinmap "no"
 
	esta opcion permite cambiar la asignacion de puertos de cada LUT que componen los anillos. Esta opción
	debe darse entre conmillas, y las asignaciones de cada inveror separadas por punto y coma ';'. por otro
	lado, cada asignación debe hacerse respetando el lenguaje XDC: 'I0:Ax,I1:Ay,I2:Az,...'. Si se dan menos
	asignaciones que inversores componen cada anillo, los inversores restantes se fijarán igual que el último
	inversor especificado. Alternativamente, puede darse como asignación la palabra 'no', en cuyo caso el
	correspondiente inversor se dejará sin fijar (a elección del software de diseño). Recordar que el numero
	de entradas 'Ix' depende del tipo de LUT utilizado. La nomenclatura de los pines de cada LUT es
	A1,A2,A3,A4,A5,A6. El puerto 'I0' corresponde al propagador de las oscilaciones. El resto de puertos
	('I1' a 'I5') se utilizan o no en función del tipo de LUT (ver opción '-tipo'). Algunos ejemplos son:
	
		-pinmap "no"
			Esta es la opción por defecto, y deja que el software elija qué pines utilizar para cada inversor.
			
		-pinmap "I0:A5;I0:A6;I0:A4"
			Con esta opción fijamos el pin propagador de la oscilación para tres inversores. Este iseño corresponde 
			al ruteado más compacto en una fpga Zynq7000.
		
		-pinmap "I0:A5;no;I0:A4"
			Parecido al anterior, pero ahora no fijamos el segundo inversor.
		
		-pinmap "I0:A1,I1:A2,I2:A3,I3:A4,I5:A6"
			Fijamos todos los inversores igual, utilizando el puerto A1 para propagar la señal y el resto para la 
			selección de PDL (en una lut tipo LUT6).
		
		
 -minsel
 
	si esta opcion esta presente se realizar una seleccion minima (unicamente 5 bits), que comparten
		todos los inversores de cada oscilador. (NOTA: por ahora solo esta implementada en tipo=lut6)
		
		
 -Ninv 3
		
		
 -posmap "1,1;10,10;2,1;20;y"
 
	Opción par aespecificar la matriz de osciladores. Puede constar de varios dominios independientes. El 
	formato es el siguiente:
		cada dominio se separa por un espacio, y tiene el siguiente formato:
			"x0,y0;x1,y1;dx,dy;nosc;dir"
		donde:
			x0 --> coordenada X del primer oscilador de la matriz.
			y0 --> coordenada Y del primer oscilador de la matriz.
			
			x1 --> coordenada X máxima de la matriz (no se sobrepasará).
			y1 --> coordenada Y máxima de la matriz (no se sobrepasará).
			
			dx --> incremento de la coordenada X.
			dy --> incremento de la coordenada Y.
			
			nosc --> número de osciladores del dominio.
			
			dir --> dirección de crecimiento de la matriz (hasta llegar a la coordenada máxima). Puede ser
				'y' o 'x'.
			
		La opción por defecto implementa una matroz de 20 osciladores, empezando en X=1,Y=1, creciendo de uno
		en uno en dirección 'y' (i.e., vertical) hasta llegar a Y=10, momento en el que se suma '2' a la
		coordenada X (X+=2), y se reinicia la coordenada Y=1.
			
		Se pueden especificar varios dominios, siempre respetando el formato descrito arriba, y separando
		cada dominio por un espacio en blanco. 
		
		¡La opción entera debe darse entre comillas!
		

 -pblock "0,0 100,100"
 
	Si esta opción está presente, el script añade una restricción PBLOCK para el módulo TOP (i.e., todos los
	elementos auxiliares de la matriz de osciladores se colocarán dentro de este espacio). Esta opción debe ir
	acompañada de dos puntos que representan respectivamente las esquinas inferior izda. y superior dcha. del
	rectángulo de restricción, indicados con el formato: X0,Y0 X1,Y1. El diseñador es responsable de que la fpga
	utilizada disponga de recursos suficientes en el bloque descrito. Esta opción debe darse entre comillas.

		
 -resolucion 1000000


 -dw 32
 
	data_width (tamano del bus gpio)

		
 -biw <auto>
 
	buffer_in_width (bits significativos de la palabra de entrada data_in). Si esta opcion se omite
		el script calcula automáticamente cuántos bits son necesarios para: (i) seleccionar el oscilador de la
		matriz y (ii) seleccionar la configuración de cada inversor. La trama del buffer de entrada será: [biw-1:x]
		para la configuración, y [x-1:0] para seleccionar el oscilador.

		
 -bow 32
 
	buffer_out_width (bits significativos de la palabra de salida data_out)


 -linux
 
	utilizar esta opcion si Vivado esta instalado en un SO linux. De otro modo el formato de los PATH
		sera el de Windows y los script tcl fallaran

